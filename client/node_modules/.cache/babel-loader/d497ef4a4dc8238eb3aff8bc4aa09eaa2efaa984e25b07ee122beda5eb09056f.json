{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DeLL\\\\Dropbox\\\\My PC (DESKTOP-2P3I371)\\\\Desktop\\\\20ucs079\\\\client\\\\src\\\\pages\\\\Summary.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Box, Typography, useTheme, useMediaQuery, TextField, Button, Alert, Collapse, Card } from \"@mui/material\";\nimport toast from \"react-hot-toast\";\nimport { createWorker } from \"tesseract.js\";\nimport Jimp from \"jimp\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OCR = () => {\n  _s();\n  const theme = useTheme();\n  // Media\n  const isNotMobile = useMediaQuery(\"(min-width: 1000px)\");\n  // States\n  const [imagePath, setImagePath] = useState(\"\");\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(\"\");\n  const performOCR = async () => {\n    try {\n      const worker = createWorker();\n      await worker.loadLanguage(\"ind\");\n      await worker.initialize(\"ind\");\n      await worker.setParameters({});\n      const image = await Jimp.read(imagePath);\n      image.rgba(false);\n      image.greyscale();\n      await image.write(\"edited_\" + imagePath);\n      setTimeout(async () => {\n        const data = await worker.recognize(\"edited_\" + imagePath);\n        console.log(\"Total Accuracy\", data.data.confidence);\n        console.log(\"Total Accuracy\", data.data.text);\n        const recognizedText = [];\n        data.data.lines.forEach(item => {\n          if (item.confidence > 60) {\n            item.text.split(\"\\n\").forEach(word => {\n              word = word.trim().split(\" \");\n              const wordKey = word[0].replace(/[&\\/\\\\#+()$~%'\":;\"*?<>{}]/g, \"\").toLowerCase();\n              word.shift();\n              const wordValue = word.join().replace(/[&\\/\\\\#,+()$~%.'\":;\"\\-*?<>{}]/g, \" \").trim();\n              if (wordKey !== \"\") {\n                recognizedText.push({\n                  [wordKey]: wordValue\n                });\n              }\n            });\n          }\n        });\n        setResults(recognizedText);\n        await worker.terminate();\n      }, 600);\n    } catch (err) {\n      console.error(err);\n      setError(\"Error processing OCR.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    width: isNotMobile ? \"40%\" : \"80%\",\n    p: \"2rem\",\n    m: \"2rem auto\",\n    borderRadius: 5,\n    sx: {\n      boxShadow: 5\n    },\n    backgroundColor: theme.palette.background.default,\n    children: [/*#__PURE__*/_jsxDEV(Collapse, {\n      in: error,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      children: \"OCR (Optical Character Recognition)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      placeholder: \"Path to image file\",\n      type: \"text\",\n      required: true,\n      margin: \"normal\",\n      fullWidth: true,\n      value: imagePath,\n      onChange: e => setImagePath(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: performOCR,\n      fullWidth: true,\n      variant: \"contained\",\n      size: \"large\",\n      sx: {\n        backgroundColor: theme.palette.background.alt,\n        color: \"white\",\n        mt: 2,\n        \"&:hover\": {\n          backgroundColor: theme.palette.background.basic\n        }\n      },\n      children: \"Perform OCR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), results ? /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 4,\n        border: 1,\n        boxShadow: 0,\n        borderRadius: 5,\n        borderColor: \"natural.medium\",\n        bgcolor: \"background.default\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        p: 2,\n        children: JSON.stringify(results, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 4,\n        border: 1,\n        boxShadow: 0,\n        borderRadius: 5,\n        borderColor: \"natural.medium\",\n        bgcolor: \"background.default\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        color: \"natural.main\",\n        sx: {\n          textAlign: \"center\",\n          verticalAlign: \"middle\",\n          lineHeight: \"450px\",\n          fontStyle: \"italic\"\n        },\n        children: \"Recognized text will be displayed here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(OCR, \"cxgvjHZnZiiWG+rA7GJOoAz21dc=\", false, function () {\n  return [useTheme, useMediaQuery];\n});\n_c = OCR;\nexport default OCR;\nvar _c;\n$RefreshReg$(_c, \"OCR\");","map":{"version":3,"names":["React","useState","Box","Typography","useTheme","useMediaQuery","TextField","Button","Alert","Collapse","Card","toast","createWorker","Jimp","jsxDEV","_jsxDEV","OCR","_s","theme","isNotMobile","imagePath","setImagePath","results","setResults","error","setError","performOCR","worker","loadLanguage","initialize","setParameters","image","read","rgba","greyscale","write","setTimeout","data","recognize","console","log","confidence","text","recognizedText","lines","forEach","item","split","word","trim","wordKey","replace","toLowerCase","shift","wordValue","join","push","terminate","err","width","p","m","borderRadius","sx","boxShadow","backgroundColor","palette","background","default","children","in","severity","mb","fileName","_jsxFileName","lineNumber","columnNumber","variant","placeholder","type","required","margin","fullWidth","value","onChange","e","target","onClick","size","alt","color","mt","basic","border","borderColor","bgcolor","JSON","stringify","textAlign","verticalAlign","lineHeight","fontStyle","_c","$RefreshReg$"],"sources":["C:/Users/DeLL/Dropbox/My PC (DESKTOP-2P3I371)/Desktop/20ucs079/client/src/pages/Summary.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Box, Typography, useTheme, useMediaQuery, TextField, Button, Alert, Collapse, Card } from \"@mui/material\";\r\nimport toast from \"react-hot-toast\";\r\nimport { createWorker } from \"tesseract.js\";\r\nimport Jimp from \"jimp\";\r\n\r\nconst OCR = () => {\r\n  const theme = useTheme();\r\n  // Media\r\n  const isNotMobile = useMediaQuery(\"(min-width: 1000px)\");\r\n  // States\r\n  const [imagePath, setImagePath] = useState(\"\");\r\n  const [results, setResults] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const performOCR = async () => {\r\n    try {\r\n      const worker = createWorker();\r\n      await worker.loadLanguage(\"ind\");\r\n      await worker.initialize(\"ind\");\r\n      await worker.setParameters({});\r\n\r\n      const image = await Jimp.read(imagePath);\r\n      image.rgba(false);\r\n      image.greyscale();\r\n      await image.write(\"edited_\" + imagePath);\r\n\r\n      setTimeout(async () => {\r\n        const data = await worker.recognize(\"edited_\" + imagePath);\r\n        console.log(\"Total Accuracy\", data.data.confidence);\r\n        console.log(\"Total Accuracy\", data.data.text);\r\n        const recognizedText = [];\r\n        data.data.lines.forEach((item) => {\r\n          if (item.confidence > 60) {\r\n            item.text.split(\"\\n\").forEach((word) => {\r\n              word = word.trim().split(\" \");\r\n              const wordKey = word[0].replace(/[&\\/\\\\#+()$~%'\":;\"*?<>{}]/g, \"\").toLowerCase();\r\n              word.shift();\r\n              const wordValue = word\r\n                .join()\r\n                .replace(/[&\\/\\\\#,+()$~%.'\":;\"\\-*?<>{}]/g, \" \")\r\n                .trim();\r\n              if (wordKey !== \"\") {\r\n                recognizedText.push({\r\n                  [wordKey]: wordValue,\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n        setResults(recognizedText);\r\n        await worker.terminate();\r\n      }, 600);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError(\"Error processing OCR.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      width={isNotMobile ? \"40%\" : \"80%\"}\r\n      p={\"2rem\"}\r\n      m={\"2rem auto\"}\r\n      borderRadius={5}\r\n      sx={{ boxShadow: 5 }}\r\n      backgroundColor={theme.palette.background.default}\r\n    >\r\n      <Collapse in={error}>\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      </Collapse>\r\n      <Typography variant=\"h3\">OCR (Optical Character Recognition)</Typography>\r\n      <TextField\r\n        placeholder=\"Path to image file\"\r\n        type=\"text\"\r\n        required\r\n        margin=\"normal\"\r\n        fullWidth\r\n        value={imagePath}\r\n        onChange={(e) => setImagePath(e.target.value)}\r\n      />\r\n      <Button\r\n        onClick={performOCR}\r\n        fullWidth\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        sx={{\r\n          backgroundColor: theme.palette.background.alt,\r\n          color: \"white\",\r\n          mt: 2,\r\n          \"&:hover\": { backgroundColor: theme.palette.background.basic },\r\n        }}\r\n      >\r\n        Perform OCR\r\n      </Button>\r\n      {results ? (\r\n        <Card sx={{ mt: 4, border: 1, boxShadow: 0, borderRadius: 5, borderColor: \"natural.medium\", bgcolor: \"background.default\" }}>\r\n          <Typography p={2}>{JSON.stringify(results, null, 2)}</Typography>\r\n        </Card>\r\n      ) : (\r\n        <Card sx={{ mt: 4, border: 1, boxShadow: 0, borderRadius: 5, borderColor: \"natural.medium\", bgcolor: \"background.default\" }}>\r\n          <Typography variant=\"h6\" color=\"natural.main\" sx={{ textAlign: \"center\", verticalAlign: \"middle\", lineHeight: \"450px\", fontStyle: \"italic\" }}>\r\n            Recognized text will be displayed here\r\n          </Typography>\r\n        </Card>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default OCR;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}